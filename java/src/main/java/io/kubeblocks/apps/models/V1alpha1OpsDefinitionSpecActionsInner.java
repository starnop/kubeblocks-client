/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecActionsInnerExec;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecActionsInnerResourceModifier;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecActionsInnerWorkload;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * OpsAction specifies a custom action defined in OpsDefinition for execution in a \&quot;Custom\&quot; OpsRequest.   OpsAction can be of three types:   - workload: Creates a Job or Pod to run custom scripts, ideal for isolated or long-running tasks. - exec: Executes commands directly within an existing container using the kubectl exec interface, suitable for immediate, short-lived operations. - resourceModifier: Modifies a K8s object using JSON patches, useful for updating the spec of some resource.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T15:59:08.817252Z[Etc/UTC]")
public class V1alpha1OpsDefinitionSpecActionsInner {
  public static final String SERIALIZED_NAME_EXEC = "exec";
  @SerializedName(SERIALIZED_NAME_EXEC)
  private V1alpha1OpsDefinitionSpecActionsInnerExec exec;

  public static final String SERIALIZED_NAME_FAILURE_POLICY = "failurePolicy";
  @SerializedName(SERIALIZED_NAME_FAILURE_POLICY)
  private String failurePolicy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<String> parameters;

  public static final String SERIALIZED_NAME_RESOURCE_MODIFIER = "resourceModifier";
  @SerializedName(SERIALIZED_NAME_RESOURCE_MODIFIER)
  private V1alpha1OpsDefinitionSpecActionsInnerResourceModifier resourceModifier;

  public static final String SERIALIZED_NAME_WORKLOAD = "workload";
  @SerializedName(SERIALIZED_NAME_WORKLOAD)
  private V1alpha1OpsDefinitionSpecActionsInnerWorkload workload;

  public V1alpha1OpsDefinitionSpecActionsInner() {
  }

  public V1alpha1OpsDefinitionSpecActionsInner exec(V1alpha1OpsDefinitionSpecActionsInnerExec exec) {
    
    this.exec = exec;
    return this;
  }

   /**
   * Get exec
   * @return exec
  **/
  @jakarta.annotation.Nullable
  public V1alpha1OpsDefinitionSpecActionsInnerExec getExec() {
    return exec;
  }


  public void setExec(V1alpha1OpsDefinitionSpecActionsInnerExec exec) {
    this.exec = exec;
  }


  public V1alpha1OpsDefinitionSpecActionsInner failurePolicy(String failurePolicy) {
    
    this.failurePolicy = failurePolicy;
    return this;
  }

   /**
   * Specifies the failure policy of the OpsAction. Valid values are:   - \&quot;Fail\&quot;: Marks the entire OpsRequest as failed if the action fails. - \&quot;Ignore\&quot;: The OpsRequest continues processing despite the failure of the action.
   * @return failurePolicy
  **/
  @jakarta.annotation.Nullable
  public String getFailurePolicy() {
    return failurePolicy;
  }


  public void setFailurePolicy(String failurePolicy) {
    this.failurePolicy = failurePolicy;
  }


  public V1alpha1OpsDefinitionSpecActionsInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specifies the name of the OpsAction.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1OpsDefinitionSpecActionsInner parameters(List<String> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public V1alpha1OpsDefinitionSpecActionsInner addParametersItem(String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * Specifies the parameters for the OpsAction. Their usage varies based on the action type:   - For &#39;workload&#39; or &#39;exec&#39; actions, parameters are injected as environment variables. - For &#39;resourceModifier&#39; actions, parameter can be referenced using $() in fields &#x60;resourceModifier.completionProbe.matchExpressions&#x60; and &#x60;resourceModifier.jsonPatches[*].value&#x60;.
   * @return parameters
  **/
  @jakarta.annotation.Nullable
  public List<String> getParameters() {
    return parameters;
  }


  public void setParameters(List<String> parameters) {
    this.parameters = parameters;
  }


  public V1alpha1OpsDefinitionSpecActionsInner resourceModifier(V1alpha1OpsDefinitionSpecActionsInnerResourceModifier resourceModifier) {
    
    this.resourceModifier = resourceModifier;
    return this;
  }

   /**
   * Get resourceModifier
   * @return resourceModifier
  **/
  @jakarta.annotation.Nullable
  public V1alpha1OpsDefinitionSpecActionsInnerResourceModifier getResourceModifier() {
    return resourceModifier;
  }


  public void setResourceModifier(V1alpha1OpsDefinitionSpecActionsInnerResourceModifier resourceModifier) {
    this.resourceModifier = resourceModifier;
  }


  public V1alpha1OpsDefinitionSpecActionsInner workload(V1alpha1OpsDefinitionSpecActionsInnerWorkload workload) {
    
    this.workload = workload;
    return this;
  }

   /**
   * Get workload
   * @return workload
  **/
  @jakarta.annotation.Nullable
  public V1alpha1OpsDefinitionSpecActionsInnerWorkload getWorkload() {
    return workload;
  }


  public void setWorkload(V1alpha1OpsDefinitionSpecActionsInnerWorkload workload) {
    this.workload = workload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1OpsDefinitionSpecActionsInner v1alpha1OpsDefinitionSpecActionsInner = (V1alpha1OpsDefinitionSpecActionsInner) o;
    return Objects.equals(this.exec, v1alpha1OpsDefinitionSpecActionsInner.exec) &&
        Objects.equals(this.failurePolicy, v1alpha1OpsDefinitionSpecActionsInner.failurePolicy) &&
        Objects.equals(this.name, v1alpha1OpsDefinitionSpecActionsInner.name) &&
        Objects.equals(this.parameters, v1alpha1OpsDefinitionSpecActionsInner.parameters) &&
        Objects.equals(this.resourceModifier, v1alpha1OpsDefinitionSpecActionsInner.resourceModifier) &&
        Objects.equals(this.workload, v1alpha1OpsDefinitionSpecActionsInner.workload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exec, failurePolicy, name, parameters, resourceModifier, workload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1OpsDefinitionSpecActionsInner {\n");
    sb.append("    exec: ").append(toIndentedString(exec)).append("\n");
    sb.append("    failurePolicy: ").append(toIndentedString(failurePolicy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    resourceModifier: ").append(toIndentedString(resourceModifier)).append("\n");
    sb.append("    workload: ").append(toIndentedString(workload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exec");
    openapiFields.add("failurePolicy");
    openapiFields.add("name");
    openapiFields.add("parameters");
    openapiFields.add("resourceModifier");
    openapiFields.add("workload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1OpsDefinitionSpecActionsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1OpsDefinitionSpecActionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1OpsDefinitionSpecActionsInner is not found in the empty JSON string", V1alpha1OpsDefinitionSpecActionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1OpsDefinitionSpecActionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1OpsDefinitionSpecActionsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1OpsDefinitionSpecActionsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `exec`
      if (jsonObj.get("exec") != null && !jsonObj.get("exec").isJsonNull()) {
        V1alpha1OpsDefinitionSpecActionsInnerExec.validateJsonObject(jsonObj.getAsJsonObject("exec"));
      }
      if ((jsonObj.get("failurePolicy") != null && !jsonObj.get("failurePolicy").isJsonNull()) && !jsonObj.get("failurePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failurePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failurePolicy").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
      }
      // validate the optional field `resourceModifier`
      if (jsonObj.get("resourceModifier") != null && !jsonObj.get("resourceModifier").isJsonNull()) {
        V1alpha1OpsDefinitionSpecActionsInnerResourceModifier.validateJsonObject(jsonObj.getAsJsonObject("resourceModifier"));
      }
      // validate the optional field `workload`
      if (jsonObj.get("workload") != null && !jsonObj.get("workload").isJsonNull()) {
        V1alpha1OpsDefinitionSpecActionsInnerWorkload.validateJsonObject(jsonObj.getAsJsonObject("workload"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1OpsDefinitionSpecActionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1OpsDefinitionSpecActionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1OpsDefinitionSpecActionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1OpsDefinitionSpecActionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1OpsDefinitionSpecActionsInner>() {
           @Override
           public void write(JsonWriter out, V1alpha1OpsDefinitionSpecActionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1OpsDefinitionSpecActionsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1OpsDefinitionSpecActionsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1OpsDefinitionSpecActionsInner
  * @throws IOException if the JSON string is invalid with respect to V1alpha1OpsDefinitionSpecActionsInner
  */
  public static V1alpha1OpsDefinitionSpecActionsInner fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1OpsDefinitionSpecActionsInner.class);
  }

 /**
  * Convert an instance of V1alpha1OpsDefinitionSpecActionsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

