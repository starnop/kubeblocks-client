/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecActionsInnerResourceModifierCompletionProbe;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecActionsInnerResourceModifierJsonPatchesInner;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecActionsInnerResourceModifierResource;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Specifies the configuration for a &#39;resourceModifier&#39; action. This action allows for modifications to existing K8s objects.   Note: This feature has not been implemented yet.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T15:59:08.817252Z[Etc/UTC]")
public class V1alpha1OpsDefinitionSpecActionsInnerResourceModifier {
  public static final String SERIALIZED_NAME_COMPLETION_PROBE = "completionProbe";
  @SerializedName(SERIALIZED_NAME_COMPLETION_PROBE)
  private V1alpha1OpsDefinitionSpecActionsInnerResourceModifierCompletionProbe completionProbe;

  public static final String SERIALIZED_NAME_JSON_PATCHES = "jsonPatches";
  @SerializedName(SERIALIZED_NAME_JSON_PATCHES)
  private List<V1alpha1OpsDefinitionSpecActionsInnerResourceModifierJsonPatchesInner> jsonPatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private V1alpha1OpsDefinitionSpecActionsInnerResourceModifierResource resource;

  public V1alpha1OpsDefinitionSpecActionsInnerResourceModifier() {
  }

  public V1alpha1OpsDefinitionSpecActionsInnerResourceModifier completionProbe(V1alpha1OpsDefinitionSpecActionsInnerResourceModifierCompletionProbe completionProbe) {
    
    this.completionProbe = completionProbe;
    return this;
  }

   /**
   * Get completionProbe
   * @return completionProbe
  **/
  @jakarta.annotation.Nonnull
  public V1alpha1OpsDefinitionSpecActionsInnerResourceModifierCompletionProbe getCompletionProbe() {
    return completionProbe;
  }


  public void setCompletionProbe(V1alpha1OpsDefinitionSpecActionsInnerResourceModifierCompletionProbe completionProbe) {
    this.completionProbe = completionProbe;
  }


  public V1alpha1OpsDefinitionSpecActionsInnerResourceModifier jsonPatches(List<V1alpha1OpsDefinitionSpecActionsInnerResourceModifierJsonPatchesInner> jsonPatches) {
    
    this.jsonPatches = jsonPatches;
    return this;
  }

  public V1alpha1OpsDefinitionSpecActionsInnerResourceModifier addJsonPatchesItem(V1alpha1OpsDefinitionSpecActionsInnerResourceModifierJsonPatchesInner jsonPatchesItem) {
    if (this.jsonPatches == null) {
      this.jsonPatches = new ArrayList<>();
    }
    this.jsonPatches.add(jsonPatchesItem);
    return this;
  }

   /**
   * Specifies a list of patches for modifying the object.
   * @return jsonPatches
  **/
  @jakarta.annotation.Nonnull
  public List<V1alpha1OpsDefinitionSpecActionsInnerResourceModifierJsonPatchesInner> getJsonPatches() {
    return jsonPatches;
  }


  public void setJsonPatches(List<V1alpha1OpsDefinitionSpecActionsInnerResourceModifierJsonPatchesInner> jsonPatches) {
    this.jsonPatches = jsonPatches;
  }


  public V1alpha1OpsDefinitionSpecActionsInnerResourceModifier resource(V1alpha1OpsDefinitionSpecActionsInnerResourceModifierResource resource) {
    
    this.resource = resource;
    return this;
  }

   /**
   * Get resource
   * @return resource
  **/
  @jakarta.annotation.Nonnull
  public V1alpha1OpsDefinitionSpecActionsInnerResourceModifierResource getResource() {
    return resource;
  }


  public void setResource(V1alpha1OpsDefinitionSpecActionsInnerResourceModifierResource resource) {
    this.resource = resource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1OpsDefinitionSpecActionsInnerResourceModifier v1alpha1OpsDefinitionSpecActionsInnerResourceModifier = (V1alpha1OpsDefinitionSpecActionsInnerResourceModifier) o;
    return Objects.equals(this.completionProbe, v1alpha1OpsDefinitionSpecActionsInnerResourceModifier.completionProbe) &&
        Objects.equals(this.jsonPatches, v1alpha1OpsDefinitionSpecActionsInnerResourceModifier.jsonPatches) &&
        Objects.equals(this.resource, v1alpha1OpsDefinitionSpecActionsInnerResourceModifier.resource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionProbe, jsonPatches, resource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1OpsDefinitionSpecActionsInnerResourceModifier {\n");
    sb.append("    completionProbe: ").append(toIndentedString(completionProbe)).append("\n");
    sb.append("    jsonPatches: ").append(toIndentedString(jsonPatches)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completionProbe");
    openapiFields.add("jsonPatches");
    openapiFields.add("resource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("completionProbe");
    openapiRequiredFields.add("jsonPatches");
    openapiRequiredFields.add("resource");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1OpsDefinitionSpecActionsInnerResourceModifier
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1OpsDefinitionSpecActionsInnerResourceModifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1OpsDefinitionSpecActionsInnerResourceModifier is not found in the empty JSON string", V1alpha1OpsDefinitionSpecActionsInnerResourceModifier.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1OpsDefinitionSpecActionsInnerResourceModifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1OpsDefinitionSpecActionsInnerResourceModifier` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1OpsDefinitionSpecActionsInnerResourceModifier.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `completionProbe`
      V1alpha1OpsDefinitionSpecActionsInnerResourceModifierCompletionProbe.validateJsonObject(jsonObj.getAsJsonObject("completionProbe"));
      // ensure the json data is an array
      if (!jsonObj.get("jsonPatches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonPatches` to be an array in the JSON string but got `%s`", jsonObj.get("jsonPatches").toString()));
      }

      JsonArray jsonArrayjsonPatches = jsonObj.getAsJsonArray("jsonPatches");
      // validate the required field `jsonPatches` (array)
      for (int i = 0; i < jsonArrayjsonPatches.size(); i++) {
        V1alpha1OpsDefinitionSpecActionsInnerResourceModifierJsonPatchesInner.validateJsonObject(jsonArrayjsonPatches.get(i).getAsJsonObject());
      };
      // validate the required field `resource`
      V1alpha1OpsDefinitionSpecActionsInnerResourceModifierResource.validateJsonObject(jsonObj.getAsJsonObject("resource"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1OpsDefinitionSpecActionsInnerResourceModifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1OpsDefinitionSpecActionsInnerResourceModifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1OpsDefinitionSpecActionsInnerResourceModifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1OpsDefinitionSpecActionsInnerResourceModifier.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1OpsDefinitionSpecActionsInnerResourceModifier>() {
           @Override
           public void write(JsonWriter out, V1alpha1OpsDefinitionSpecActionsInnerResourceModifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1OpsDefinitionSpecActionsInnerResourceModifier read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1OpsDefinitionSpecActionsInnerResourceModifier given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1OpsDefinitionSpecActionsInnerResourceModifier
  * @throws IOException if the JSON string is invalid with respect to V1alpha1OpsDefinitionSpecActionsInnerResourceModifier
  */
  public static V1alpha1OpsDefinitionSpecActionsInnerResourceModifier fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1OpsDefinitionSpecActionsInnerResourceModifier.class);
  }

 /**
  * Convert an instance of V1alpha1OpsDefinitionSpecActionsInnerResourceModifier to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

