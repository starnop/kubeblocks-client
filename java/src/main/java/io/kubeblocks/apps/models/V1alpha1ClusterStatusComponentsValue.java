/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ClusterStatusComponentsValueMembersStatusInner;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * ClusterComponentStatus records Component status.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T15:59:08.817252Z[Etc/UTC]")
public class V1alpha1ClusterStatusComponentsValue {
  public static final String SERIALIZED_NAME_MEMBERS_STATUS = "membersStatus";
  @SerializedName(SERIALIZED_NAME_MEMBERS_STATUS)
  private List<V1alpha1ClusterStatusComponentsValueMembersStatusInner> membersStatus;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private Map<String, String> message = new HashMap<>();

  /**
   * Specifies the current state of the Component.
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    CREATING("Creating"),
    
    RUNNING("Running"),
    
    UPDATING("Updating"),
    
    STOPPING("Stopping"),
    
    STOPPED("Stopped"),
    
    DELETING("Deleting"),
    
    FAILED("Failed"),
    
    ABNORMAL("Abnormal");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String value) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhaseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private PhaseEnum phase;

  public static final String SERIALIZED_NAME_PODS_READY = "podsReady";
  @SerializedName(SERIALIZED_NAME_PODS_READY)
  private Boolean podsReady;

  public static final String SERIALIZED_NAME_PODS_READY_TIME = "podsReadyTime";
  @SerializedName(SERIALIZED_NAME_PODS_READY_TIME)
  private OffsetDateTime podsReadyTime;

  public V1alpha1ClusterStatusComponentsValue() {
  }

  public V1alpha1ClusterStatusComponentsValue membersStatus(List<V1alpha1ClusterStatusComponentsValueMembersStatusInner> membersStatus) {
    
    this.membersStatus = membersStatus;
    return this;
  }

  public V1alpha1ClusterStatusComponentsValue addMembersStatusItem(V1alpha1ClusterStatusComponentsValueMembersStatusInner membersStatusItem) {
    if (this.membersStatus == null) {
      this.membersStatus = new ArrayList<>();
    }
    this.membersStatus.add(membersStatusItem);
    return this;
  }

   /**
   * Represents the status of the members.
   * @return membersStatus
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ClusterStatusComponentsValueMembersStatusInner> getMembersStatus() {
    return membersStatus;
  }


  public void setMembersStatus(List<V1alpha1ClusterStatusComponentsValueMembersStatusInner> membersStatus) {
    this.membersStatus = membersStatus;
  }


  public V1alpha1ClusterStatusComponentsValue message(Map<String, String> message) {
    
    this.message = message;
    return this;
  }

  public V1alpha1ClusterStatusComponentsValue putMessageItem(String key, String messageItem) {
    if (this.message == null) {
      this.message = new HashMap<>();
    }
    this.message.put(key, messageItem);
    return this;
  }

   /**
   * Records detailed information about the Component in its current phase. The keys are either podName, deployName, or statefulSetName, formatted as &#39;ObjectKind/Name&#39;.
   * @return message
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getMessage() {
    return message;
  }


  public void setMessage(Map<String, String> message) {
    this.message = message;
  }


  public V1alpha1ClusterStatusComponentsValue phase(PhaseEnum phase) {
    
    this.phase = phase;
    return this;
  }

   /**
   * Specifies the current state of the Component.
   * @return phase
  **/
  @jakarta.annotation.Nullable
  public PhaseEnum getPhase() {
    return phase;
  }


  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }


  public V1alpha1ClusterStatusComponentsValue podsReady(Boolean podsReady) {
    
    this.podsReady = podsReady;
    return this;
  }

   /**
   * Checks if all Pods of the Component are ready.
   * @return podsReady
  **/
  @jakarta.annotation.Nullable
  public Boolean getPodsReady() {
    return podsReady;
  }


  public void setPodsReady(Boolean podsReady) {
    this.podsReady = podsReady;
  }


  public V1alpha1ClusterStatusComponentsValue podsReadyTime(OffsetDateTime podsReadyTime) {
    
    this.podsReadyTime = podsReadyTime;
    return this;
  }

   /**
   * Indicates the time when all Component Pods became ready. This is the readiness time of the last Component Pod.
   * @return podsReadyTime
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPodsReadyTime() {
    return podsReadyTime;
  }


  public void setPodsReadyTime(OffsetDateTime podsReadyTime) {
    this.podsReadyTime = podsReadyTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ClusterStatusComponentsValue v1alpha1ClusterStatusComponentsValue = (V1alpha1ClusterStatusComponentsValue) o;
    return Objects.equals(this.membersStatus, v1alpha1ClusterStatusComponentsValue.membersStatus) &&
        Objects.equals(this.message, v1alpha1ClusterStatusComponentsValue.message) &&
        Objects.equals(this.phase, v1alpha1ClusterStatusComponentsValue.phase) &&
        Objects.equals(this.podsReady, v1alpha1ClusterStatusComponentsValue.podsReady) &&
        Objects.equals(this.podsReadyTime, v1alpha1ClusterStatusComponentsValue.podsReadyTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(membersStatus, message, phase, podsReady, podsReadyTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ClusterStatusComponentsValue {\n");
    sb.append("    membersStatus: ").append(toIndentedString(membersStatus)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    podsReady: ").append(toIndentedString(podsReady)).append("\n");
    sb.append("    podsReadyTime: ").append(toIndentedString(podsReadyTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("membersStatus");
    openapiFields.add("message");
    openapiFields.add("phase");
    openapiFields.add("podsReady");
    openapiFields.add("podsReadyTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ClusterStatusComponentsValue
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ClusterStatusComponentsValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ClusterStatusComponentsValue is not found in the empty JSON string", V1alpha1ClusterStatusComponentsValue.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ClusterStatusComponentsValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ClusterStatusComponentsValue` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("membersStatus") != null && !jsonObj.get("membersStatus").isJsonNull()) {
        JsonArray jsonArraymembersStatus = jsonObj.getAsJsonArray("membersStatus");
        if (jsonArraymembersStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("membersStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `membersStatus` to be an array in the JSON string but got `%s`", jsonObj.get("membersStatus").toString()));
          }

          // validate the optional field `membersStatus` (array)
          for (int i = 0; i < jsonArraymembersStatus.size(); i++) {
            V1alpha1ClusterStatusComponentsValueMembersStatusInner.validateJsonObject(jsonArraymembersStatus.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ClusterStatusComponentsValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ClusterStatusComponentsValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ClusterStatusComponentsValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ClusterStatusComponentsValue.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ClusterStatusComponentsValue>() {
           @Override
           public void write(JsonWriter out, V1alpha1ClusterStatusComponentsValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ClusterStatusComponentsValue read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ClusterStatusComponentsValue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ClusterStatusComponentsValue
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ClusterStatusComponentsValue
  */
  public static V1alpha1ClusterStatusComponentsValue fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ClusterStatusComponentsValue.class);
  }

 /**
  * Convert an instance of V1alpha1ClusterStatusComponentsValue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

