/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Selects a defined var of a Credential (SystemAccount).
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T15:59:08.817252Z[Etc/UTC]")
public class V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef {
  public static final String SERIALIZED_NAME_COMP_DEF = "compDef";
  @SerializedName(SERIALIZED_NAME_COMP_DEF)
  private String compDef;

  public static final String SERIALIZED_NAME_MULTIPLE_CLUSTER_OBJECT_OPTION = "multipleClusterObjectOption";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_CLUSTER_OBJECT_OPTION)
  private V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption multipleClusterObjectOption;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONAL = "optional";
  @SerializedName(SERIALIZED_NAME_OPTIONAL)
  private Boolean optional;

  /**
   * VarOption defines whether a variable is required or optional.
   */
  @JsonAdapter(PasswordEnum.Adapter.class)
  public enum PasswordEnum {
    REQUIRED("Required"),
    
    OPTIONAL("Optional");

    private String value;

    PasswordEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PasswordEnum fromValue(String value) {
      for (PasswordEnum b : PasswordEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PasswordEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PasswordEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PasswordEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PasswordEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private PasswordEnum password;

  /**
   * VarOption defines whether a variable is required or optional.
   */
  @JsonAdapter(UsernameEnum.Adapter.class)
  public enum UsernameEnum {
    REQUIRED("Required"),
    
    OPTIONAL("Optional");

    private String value;

    UsernameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsernameEnum fromValue(String value) {
      for (UsernameEnum b : UsernameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsernameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsernameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsernameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsernameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private UsernameEnum username;

  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef() {
  }

  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef compDef(String compDef) {
    
    this.compDef = compDef;
    return this;
  }

   /**
   * CompDef specifies the definition used by the component that the referent object resident in. If not specified, the component itself will be used.
   * @return compDef
  **/
  @jakarta.annotation.Nullable
  public String getCompDef() {
    return compDef;
  }


  public void setCompDef(String compDef) {
    this.compDef = compDef;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef multipleClusterObjectOption(V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption multipleClusterObjectOption) {
    
    this.multipleClusterObjectOption = multipleClusterObjectOption;
    return this;
  }

   /**
   * Get multipleClusterObjectOption
   * @return multipleClusterObjectOption
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption getMultipleClusterObjectOption() {
    return multipleClusterObjectOption;
  }


  public void setMultipleClusterObjectOption(V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption multipleClusterObjectOption) {
    this.multipleClusterObjectOption = multipleClusterObjectOption;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the referent object.
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef optional(Boolean optional) {
    
    this.optional = optional;
    return this;
  }

   /**
   * Specify whether the object must be defined.
   * @return optional
  **/
  @jakarta.annotation.Nullable
  public Boolean getOptional() {
    return optional;
  }


  public void setOptional(Boolean optional) {
    this.optional = optional;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef password(PasswordEnum password) {
    
    this.password = password;
    return this;
  }

   /**
   * VarOption defines whether a variable is required or optional.
   * @return password
  **/
  @jakarta.annotation.Nullable
  public PasswordEnum getPassword() {
    return password;
  }


  public void setPassword(PasswordEnum password) {
    this.password = password;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef username(UsernameEnum username) {
    
    this.username = username;
    return this;
  }

   /**
   * VarOption defines whether a variable is required or optional.
   * @return username
  **/
  @jakarta.annotation.Nullable
  public UsernameEnum getUsername() {
    return username;
  }


  public void setUsername(UsernameEnum username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef v1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef = (V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef) o;
    return Objects.equals(this.compDef, v1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.compDef) &&
        Objects.equals(this.multipleClusterObjectOption, v1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.multipleClusterObjectOption) &&
        Objects.equals(this.name, v1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.name) &&
        Objects.equals(this.optional, v1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.optional) &&
        Objects.equals(this.password, v1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.password) &&
        Objects.equals(this.username, v1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compDef, multipleClusterObjectOption, name, optional, password, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef {\n");
    sb.append("    compDef: ").append(toIndentedString(compDef)).append("\n");
    sb.append("    multipleClusterObjectOption: ").append(toIndentedString(multipleClusterObjectOption)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compDef");
    openapiFields.add("multipleClusterObjectOption");
    openapiFields.add("name");
    openapiFields.add("optional");
    openapiFields.add("password");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef is not found in the empty JSON string", V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("compDef") != null && !jsonObj.get("compDef").isJsonNull()) && !jsonObj.get("compDef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compDef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compDef").toString()));
      }
      // validate the optional field `multipleClusterObjectOption`
      if (jsonObj.get("multipleClusterObjectOption") != null && !jsonObj.get("multipleClusterObjectOption").isJsonNull()) {
        V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption.validateJsonObject(jsonObj.getAsJsonObject("multipleClusterObjectOption"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef>() {
           @Override
           public void write(JsonWriter out, V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef
  */
  public static V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef.class);
  }

 /**
  * Convert an instance of V1alpha1ComponentDefinitionSpecVarsInnerValueFromCredentialVarRef to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

