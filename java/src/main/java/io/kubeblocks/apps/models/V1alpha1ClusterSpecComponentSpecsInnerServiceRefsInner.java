/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInnerClusterServiceSelector;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T15:59:08.817252Z[Etc/UTC]")
public class V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner {
  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_CLUSTER_SERVICE_SELECTOR = "clusterServiceSelector";
  @SerializedName(SERIALIZED_NAME_CLUSTER_SERVICE_SELECTOR)
  private V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInnerClusterServiceSelector clusterServiceSelector;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_SERVICE_DESCRIPTOR = "serviceDescriptor";
  @SerializedName(SERIALIZED_NAME_SERVICE_DESCRIPTOR)
  private String serviceDescriptor;

  public V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner() {
  }

  public V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner cluster(String cluster) {
    
    this.cluster = cluster;
    return this;
  }

   /**
   * Specifies the name of the KubeBlocks Cluster being referenced. This is used when services from another KubeBlocks Cluster are consumed.   By default, the referenced KubeBlocks Cluster&#39;s &#x60;clusterDefinition.spec.connectionCredential&#x60; will be utilized to bind to the current Component. This credential should include: &#x60;endpoint&#x60;, &#x60;port&#x60;, &#x60;username&#x60;, and &#x60;password&#x60;.   Note:   - The &#x60;ServiceKind&#x60; and &#x60;ServiceVersion&#x60; specified in the service reference within the ClusterDefinition are not validated when using this approach. - If both &#x60;cluster&#x60; and &#x60;serviceDescriptor&#x60; are present, &#x60;cluster&#x60; will take precedence.   Deprecated since v0.9 since &#x60;clusterDefinition.spec.connectionCredential&#x60; is deprecated, use &#x60;clusterServiceSelector&#x60; instead. This field is maintained for backward compatibility and its use is discouraged. Existing usage should be updated to the current preferred approach to avoid compatibility issues in future releases.
   * @return cluster
  **/
  @jakarta.annotation.Nullable
  public String getCluster() {
    return cluster;
  }


  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner clusterServiceSelector(V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInnerClusterServiceSelector clusterServiceSelector) {
    
    this.clusterServiceSelector = clusterServiceSelector;
    return this;
  }

   /**
   * Get clusterServiceSelector
   * @return clusterServiceSelector
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInnerClusterServiceSelector getClusterServiceSelector() {
    return clusterServiceSelector;
  }


  public void setClusterServiceSelector(V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInnerClusterServiceSelector clusterServiceSelector) {
    this.clusterServiceSelector = clusterServiceSelector;
  }


  public V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specifies the identifier of the service reference declaration. It corresponds to the serviceRefDeclaration name defined in either:   - &#x60;componentDefinition.spec.serviceRefDeclarations[*].name&#x60; - &#x60;clusterDefinition.spec.componentDefs[*].serviceRefDeclarations[*].name&#x60; (deprecated)
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Specifies the namespace of the referenced Cluster or the namespace of the referenced ServiceDescriptor object. If not provided, the referenced Cluster and ServiceDescriptor will be searched in the namespace of the current Cluster by default.
   * @return namespace
  **/
  @jakarta.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner serviceDescriptor(String serviceDescriptor) {
    
    this.serviceDescriptor = serviceDescriptor;
    return this;
  }

   /**
   * Specifies the name of the ServiceDescriptor object that describes a service provided by external sources.   When referencing a service provided by external sources, a ServiceDescriptor object is required to establish the service binding. The &#x60;serviceDescriptor.spec.serviceKind&#x60; and &#x60;serviceDescriptor.spec.serviceVersion&#x60; should match the serviceKind and serviceVersion declared in the definition.   If both &#x60;cluster&#x60; and &#x60;serviceDescriptor&#x60; are specified, the &#x60;cluster&#x60; takes precedence.
   * @return serviceDescriptor
  **/
  @jakarta.annotation.Nullable
  public String getServiceDescriptor() {
    return serviceDescriptor;
  }


  public void setServiceDescriptor(String serviceDescriptor) {
    this.serviceDescriptor = serviceDescriptor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner v1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner = (V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner) o;
    return Objects.equals(this.cluster, v1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.cluster) &&
        Objects.equals(this.clusterServiceSelector, v1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.clusterServiceSelector) &&
        Objects.equals(this.name, v1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.name) &&
        Objects.equals(this.namespace, v1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.namespace) &&
        Objects.equals(this.serviceDescriptor, v1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.serviceDescriptor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, clusterServiceSelector, name, namespace, serviceDescriptor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner {\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    clusterServiceSelector: ").append(toIndentedString(clusterServiceSelector)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    serviceDescriptor: ").append(toIndentedString(serviceDescriptor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster");
    openapiFields.add("clusterServiceSelector");
    openapiFields.add("name");
    openapiFields.add("namespace");
    openapiFields.add("serviceDescriptor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner is not found in the empty JSON string", V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) && !jsonObj.get("cluster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster").toString()));
      }
      // validate the optional field `clusterServiceSelector`
      if (jsonObj.get("clusterServiceSelector") != null && !jsonObj.get("clusterServiceSelector").isJsonNull()) {
        V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInnerClusterServiceSelector.validateJsonObject(jsonObj.getAsJsonObject("clusterServiceSelector"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("serviceDescriptor") != null && !jsonObj.get("serviceDescriptor").isJsonNull()) && !jsonObj.get("serviceDescriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDescriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDescriptor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner>() {
           @Override
           public void write(JsonWriter out, V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner
  */
  public static V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner.class);
  }

 /**
  * Convert an instance of V1alpha1ClusterSpecComponentSpecsInnerServiceRefsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

