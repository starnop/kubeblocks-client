/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Selects a defined var of a Component.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T15:59:08.817252Z[Etc/UTC]")
public class V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef {
  public static final String SERIALIZED_NAME_COMP_DEF = "compDef";
  @SerializedName(SERIALIZED_NAME_COMP_DEF)
  private String compDef;

  /**
   * Reference to the name of the Component object.
   */
  @JsonAdapter(ComponentNameEnum.Adapter.class)
  public enum ComponentNameEnum {
    REQUIRED("Required"),
    
    OPTIONAL("Optional");

    private String value;

    ComponentNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComponentNameEnum fromValue(String value) {
      for (ComponentNameEnum b : ComponentNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComponentNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComponentNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComponentNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComponentNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPONENT_NAME = "componentName";
  @SerializedName(SERIALIZED_NAME_COMPONENT_NAME)
  private ComponentNameEnum componentName;

  /**
   * Reference to the instanceName list of the component. and the value will be presented in the following format: instanceName1,instanceName2,...
   */
  @JsonAdapter(InstanceNamesEnum.Adapter.class)
  public enum InstanceNamesEnum {
    REQUIRED("Required"),
    
    OPTIONAL("Optional");

    private String value;

    InstanceNamesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstanceNamesEnum fromValue(String value) {
      for (InstanceNamesEnum b : InstanceNamesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstanceNamesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstanceNamesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstanceNamesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstanceNamesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INSTANCE_NAMES = "instanceNames";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAMES)
  private InstanceNamesEnum instanceNames;

  public static final String SERIALIZED_NAME_MULTIPLE_CLUSTER_OBJECT_OPTION = "multipleClusterObjectOption";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_CLUSTER_OBJECT_OPTION)
  private V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption multipleClusterObjectOption;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONAL = "optional";
  @SerializedName(SERIALIZED_NAME_OPTIONAL)
  private Boolean optional;

  /**
   * Reference to the pod FQDN list of the component. The value will be presented in the following format: FQDN1,FQDN2,...
   */
  @JsonAdapter(PodFQDNsEnum.Adapter.class)
  public enum PodFQDNsEnum {
    REQUIRED("Required"),
    
    OPTIONAL("Optional");

    private String value;

    PodFQDNsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PodFQDNsEnum fromValue(String value) {
      for (PodFQDNsEnum b : PodFQDNsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PodFQDNsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PodFQDNsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PodFQDNsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PodFQDNsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_POD_F_Q_D_NS = "podFQDNs";
  @SerializedName(SERIALIZED_NAME_POD_F_Q_D_NS)
  private PodFQDNsEnum podFQDNs;

  /**
   * Reference to the replicas of the component.
   */
  @JsonAdapter(ReplicasEnum.Adapter.class)
  public enum ReplicasEnum {
    REQUIRED("Required"),
    
    OPTIONAL("Optional");

    private String value;

    ReplicasEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReplicasEnum fromValue(String value) {
      for (ReplicasEnum b : ReplicasEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReplicasEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReplicasEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReplicasEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReplicasEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private ReplicasEnum replicas;

  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef() {
  }

  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef compDef(String compDef) {
    
    this.compDef = compDef;
    return this;
  }

   /**
   * CompDef specifies the definition used by the component that the referent object resident in. If not specified, the component itself will be used.
   * @return compDef
  **/
  @jakarta.annotation.Nullable
  public String getCompDef() {
    return compDef;
  }


  public void setCompDef(String compDef) {
    this.compDef = compDef;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef componentName(ComponentNameEnum componentName) {
    
    this.componentName = componentName;
    return this;
  }

   /**
   * Reference to the name of the Component object.
   * @return componentName
  **/
  @jakarta.annotation.Nullable
  public ComponentNameEnum getComponentName() {
    return componentName;
  }


  public void setComponentName(ComponentNameEnum componentName) {
    this.componentName = componentName;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef instanceNames(InstanceNamesEnum instanceNames) {
    
    this.instanceNames = instanceNames;
    return this;
  }

   /**
   * Reference to the instanceName list of the component. and the value will be presented in the following format: instanceName1,instanceName2,...
   * @return instanceNames
  **/
  @jakarta.annotation.Nullable
  public InstanceNamesEnum getInstanceNames() {
    return instanceNames;
  }


  public void setInstanceNames(InstanceNamesEnum instanceNames) {
    this.instanceNames = instanceNames;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef multipleClusterObjectOption(V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption multipleClusterObjectOption) {
    
    this.multipleClusterObjectOption = multipleClusterObjectOption;
    return this;
  }

   /**
   * Get multipleClusterObjectOption
   * @return multipleClusterObjectOption
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption getMultipleClusterObjectOption() {
    return multipleClusterObjectOption;
  }


  public void setMultipleClusterObjectOption(V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption multipleClusterObjectOption) {
    this.multipleClusterObjectOption = multipleClusterObjectOption;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the referent object.
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef optional(Boolean optional) {
    
    this.optional = optional;
    return this;
  }

   /**
   * Specify whether the object must be defined.
   * @return optional
  **/
  @jakarta.annotation.Nullable
  public Boolean getOptional() {
    return optional;
  }


  public void setOptional(Boolean optional) {
    this.optional = optional;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef podFQDNs(PodFQDNsEnum podFQDNs) {
    
    this.podFQDNs = podFQDNs;
    return this;
  }

   /**
   * Reference to the pod FQDN list of the component. The value will be presented in the following format: FQDN1,FQDN2,...
   * @return podFQDNs
  **/
  @jakarta.annotation.Nullable
  public PodFQDNsEnum getPodFQDNs() {
    return podFQDNs;
  }


  public void setPodFQDNs(PodFQDNsEnum podFQDNs) {
    this.podFQDNs = podFQDNs;
  }


  public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef replicas(ReplicasEnum replicas) {
    
    this.replicas = replicas;
    return this;
  }

   /**
   * Reference to the replicas of the component.
   * @return replicas
  **/
  @jakarta.annotation.Nullable
  public ReplicasEnum getReplicas() {
    return replicas;
  }


  public void setReplicas(ReplicasEnum replicas) {
    this.replicas = replicas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef v1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef = (V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef) o;
    return Objects.equals(this.compDef, v1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.compDef) &&
        Objects.equals(this.componentName, v1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.componentName) &&
        Objects.equals(this.instanceNames, v1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.instanceNames) &&
        Objects.equals(this.multipleClusterObjectOption, v1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.multipleClusterObjectOption) &&
        Objects.equals(this.name, v1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.name) &&
        Objects.equals(this.optional, v1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.optional) &&
        Objects.equals(this.podFQDNs, v1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.podFQDNs) &&
        Objects.equals(this.replicas, v1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.replicas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compDef, componentName, instanceNames, multipleClusterObjectOption, name, optional, podFQDNs, replicas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef {\n");
    sb.append("    compDef: ").append(toIndentedString(compDef)).append("\n");
    sb.append("    componentName: ").append(toIndentedString(componentName)).append("\n");
    sb.append("    instanceNames: ").append(toIndentedString(instanceNames)).append("\n");
    sb.append("    multipleClusterObjectOption: ").append(toIndentedString(multipleClusterObjectOption)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    podFQDNs: ").append(toIndentedString(podFQDNs)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compDef");
    openapiFields.add("componentName");
    openapiFields.add("instanceNames");
    openapiFields.add("multipleClusterObjectOption");
    openapiFields.add("name");
    openapiFields.add("optional");
    openapiFields.add("podFQDNs");
    openapiFields.add("replicas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef is not found in the empty JSON string", V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("compDef") != null && !jsonObj.get("compDef").isJsonNull()) && !jsonObj.get("compDef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compDef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compDef").toString()));
      }
      if ((jsonObj.get("componentName") != null && !jsonObj.get("componentName").isJsonNull()) && !jsonObj.get("componentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `componentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("componentName").toString()));
      }
      if ((jsonObj.get("instanceNames") != null && !jsonObj.get("instanceNames").isJsonNull()) && !jsonObj.get("instanceNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceNames").toString()));
      }
      // validate the optional field `multipleClusterObjectOption`
      if (jsonObj.get("multipleClusterObjectOption") != null && !jsonObj.get("multipleClusterObjectOption").isJsonNull()) {
        V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRefMultipleClusterObjectOption.validateJsonObject(jsonObj.getAsJsonObject("multipleClusterObjectOption"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("podFQDNs") != null && !jsonObj.get("podFQDNs").isJsonNull()) && !jsonObj.get("podFQDNs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podFQDNs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podFQDNs").toString()));
      }
      if ((jsonObj.get("replicas") != null && !jsonObj.get("replicas").isJsonNull()) && !jsonObj.get("replicas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicas").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef>() {
           @Override
           public void write(JsonWriter out, V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef
  */
  public static V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef.class);
  }

 /**
  * Convert an instance of V1alpha1ComponentDefinitionSpecVarsInnerValueFromComponentVarRef to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

