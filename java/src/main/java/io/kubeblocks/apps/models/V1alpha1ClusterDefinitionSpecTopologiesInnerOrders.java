/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Specifies the sequence in which components within a cluster topology are started, stopped, and upgraded. This ordering is crucial for maintaining the correct dependencies and operational flow across components.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T15:59:08.817252Z[Etc/UTC]")
public class V1alpha1ClusterDefinitionSpecTopologiesInnerOrders {
  public static final String SERIALIZED_NAME_PROVISION = "provision";
  @SerializedName(SERIALIZED_NAME_PROVISION)
  private List<String> provision;

  public static final String SERIALIZED_NAME_TERMINATE = "terminate";
  @SerializedName(SERIALIZED_NAME_TERMINATE)
  private List<String> terminate;

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private List<String> update;

  public V1alpha1ClusterDefinitionSpecTopologiesInnerOrders() {
  }

  public V1alpha1ClusterDefinitionSpecTopologiesInnerOrders provision(List<String> provision) {
    
    this.provision = provision;
    return this;
  }

  public V1alpha1ClusterDefinitionSpecTopologiesInnerOrders addProvisionItem(String provisionItem) {
    if (this.provision == null) {
      this.provision = new ArrayList<>();
    }
    this.provision.add(provisionItem);
    return this;
  }

   /**
   * Specifies the order for creating and initializing components. This is designed for components that depend on one another. Components without dependencies can be grouped together.   Components that can be provisioned independently or have no dependencies can be listed together in the same stage, separated by commas.
   * @return provision
  **/
  @jakarta.annotation.Nullable
  public List<String> getProvision() {
    return provision;
  }


  public void setProvision(List<String> provision) {
    this.provision = provision;
  }


  public V1alpha1ClusterDefinitionSpecTopologiesInnerOrders terminate(List<String> terminate) {
    
    this.terminate = terminate;
    return this;
  }

  public V1alpha1ClusterDefinitionSpecTopologiesInnerOrders addTerminateItem(String terminateItem) {
    if (this.terminate == null) {
      this.terminate = new ArrayList<>();
    }
    this.terminate.add(terminateItem);
    return this;
  }

   /**
   * Outlines the order for stopping and deleting components. This sequence is designed for components that require a graceful shutdown or have interdependencies.   Components that can be terminated independently or have no dependencies can be listed together in the same stage, separated by commas.
   * @return terminate
  **/
  @jakarta.annotation.Nullable
  public List<String> getTerminate() {
    return terminate;
  }


  public void setTerminate(List<String> terminate) {
    this.terminate = terminate;
  }


  public V1alpha1ClusterDefinitionSpecTopologiesInnerOrders update(List<String> update) {
    
    this.update = update;
    return this;
  }

  public V1alpha1ClusterDefinitionSpecTopologiesInnerOrders addUpdateItem(String updateItem) {
    if (this.update == null) {
      this.update = new ArrayList<>();
    }
    this.update.add(updateItem);
    return this;
  }

   /**
   * Update determines the order for updating components&#39; specifications, such as image upgrades or resource scaling. This sequence is designed for components that have dependencies or require specific update procedures.   Components that can be updated independently or have no dependencies can be listed together in the same stage, separated by commas.
   * @return update
  **/
  @jakarta.annotation.Nullable
  public List<String> getUpdate() {
    return update;
  }


  public void setUpdate(List<String> update) {
    this.update = update;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ClusterDefinitionSpecTopologiesInnerOrders v1alpha1ClusterDefinitionSpecTopologiesInnerOrders = (V1alpha1ClusterDefinitionSpecTopologiesInnerOrders) o;
    return Objects.equals(this.provision, v1alpha1ClusterDefinitionSpecTopologiesInnerOrders.provision) &&
        Objects.equals(this.terminate, v1alpha1ClusterDefinitionSpecTopologiesInnerOrders.terminate) &&
        Objects.equals(this.update, v1alpha1ClusterDefinitionSpecTopologiesInnerOrders.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provision, terminate, update);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ClusterDefinitionSpecTopologiesInnerOrders {\n");
    sb.append("    provision: ").append(toIndentedString(provision)).append("\n");
    sb.append("    terminate: ").append(toIndentedString(terminate)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provision");
    openapiFields.add("terminate");
    openapiFields.add("update");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ClusterDefinitionSpecTopologiesInnerOrders
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ClusterDefinitionSpecTopologiesInnerOrders.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ClusterDefinitionSpecTopologiesInnerOrders is not found in the empty JSON string", V1alpha1ClusterDefinitionSpecTopologiesInnerOrders.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ClusterDefinitionSpecTopologiesInnerOrders.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ClusterDefinitionSpecTopologiesInnerOrders` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("provision") != null && !jsonObj.get("provision").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `provision` to be an array in the JSON string but got `%s`", jsonObj.get("provision").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("terminate") != null && !jsonObj.get("terminate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminate` to be an array in the JSON string but got `%s`", jsonObj.get("terminate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `update` to be an array in the JSON string but got `%s`", jsonObj.get("update").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ClusterDefinitionSpecTopologiesInnerOrders.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ClusterDefinitionSpecTopologiesInnerOrders' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ClusterDefinitionSpecTopologiesInnerOrders> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ClusterDefinitionSpecTopologiesInnerOrders.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ClusterDefinitionSpecTopologiesInnerOrders>() {
           @Override
           public void write(JsonWriter out, V1alpha1ClusterDefinitionSpecTopologiesInnerOrders value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ClusterDefinitionSpecTopologiesInnerOrders read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ClusterDefinitionSpecTopologiesInnerOrders given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ClusterDefinitionSpecTopologiesInnerOrders
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ClusterDefinitionSpecTopologiesInnerOrders
  */
  public static V1alpha1ClusterDefinitionSpecTopologiesInnerOrders fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ClusterDefinitionSpecTopologiesInnerOrders.class);
  }

 /**
  * Convert an instance of V1alpha1ClusterDefinitionSpecTopologiesInnerOrders to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

