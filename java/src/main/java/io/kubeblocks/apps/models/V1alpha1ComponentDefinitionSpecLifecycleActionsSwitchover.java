/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ClusterDefinitionSpecComponentDefsInnerPostStartSpecScriptSpecSelectorsInner;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithCandidate;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithoutCandidate;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Defines the procedure for a controlled transition of leadership from the current leader to a new replica. This approach aims to minimize downtime and maintain availability in systems with a leader-follower topology, during events such as planned maintenance or when performing stop, shutdown, restart, or upgrade operations involving the current leader node.   The container executing this action has access to following environment variables:   - KB_SWITCHOVER_CANDIDATE_NAME: The name of the pod for the new leader candidate, which may not be specified (empty). - KB_SWITCHOVER_CANDIDATE_FQDN: The FQDN of the new leader candidate&#39;s pod, which may not be specified (empty). - KB_LEADER_POD_IP: The IP address of the current leader&#39;s pod prior to the switchover. - KB_LEADER_POD_NAME: The name of the current leader&#39;s pod prior to the switchover. - KB_LEADER_POD_FQDN: The FQDN of the current leader&#39;s pod prior to the switchover.   The environment variables with the following prefixes are deprecated and will be removed in future releases:   - KB_REPLICATION_PRIMARY_POD_ - KB_CONSENSUS_LEADER_POD_   Note: This field is immutable once it has been set.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T15:59:08.817252Z[Etc/UTC]")
public class V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover {
  public static final String SERIALIZED_NAME_SCRIPT_SPEC_SELECTORS = "scriptSpecSelectors";
  @SerializedName(SERIALIZED_NAME_SCRIPT_SPEC_SELECTORS)
  private List<V1alpha1ClusterDefinitionSpecComponentDefsInnerPostStartSpecScriptSpecSelectorsInner> scriptSpecSelectors;

  public static final String SERIALIZED_NAME_WITH_CANDIDATE = "withCandidate";
  @SerializedName(SERIALIZED_NAME_WITH_CANDIDATE)
  private V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithCandidate withCandidate;

  public static final String SERIALIZED_NAME_WITHOUT_CANDIDATE = "withoutCandidate";
  @SerializedName(SERIALIZED_NAME_WITHOUT_CANDIDATE)
  private V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithoutCandidate withoutCandidate;

  public V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover() {
  }

  public V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover scriptSpecSelectors(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerPostStartSpecScriptSpecSelectorsInner> scriptSpecSelectors) {
    
    this.scriptSpecSelectors = scriptSpecSelectors;
    return this;
  }

  public V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover addScriptSpecSelectorsItem(V1alpha1ClusterDefinitionSpecComponentDefsInnerPostStartSpecScriptSpecSelectorsInner scriptSpecSelectorsItem) {
    if (this.scriptSpecSelectors == null) {
      this.scriptSpecSelectors = new ArrayList<>();
    }
    this.scriptSpecSelectors.add(scriptSpecSelectorsItem);
    return this;
  }

   /**
   * Used to define the selectors for the scriptSpecs that need to be referenced. If this field is set, the scripts defined under the &#39;scripts&#39; field can be invoked or referenced within an Action.   This field is deprecated from v0.9. This field is maintained for backward compatibility and its use is discouraged. Existing usage should be updated to the current preferred approach to avoid compatibility issues in future releases.
   * @return scriptSpecSelectors
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ClusterDefinitionSpecComponentDefsInnerPostStartSpecScriptSpecSelectorsInner> getScriptSpecSelectors() {
    return scriptSpecSelectors;
  }


  public void setScriptSpecSelectors(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerPostStartSpecScriptSpecSelectorsInner> scriptSpecSelectors) {
    this.scriptSpecSelectors = scriptSpecSelectors;
  }


  public V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover withCandidate(V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithCandidate withCandidate) {
    
    this.withCandidate = withCandidate;
    return this;
  }

   /**
   * Get withCandidate
   * @return withCandidate
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithCandidate getWithCandidate() {
    return withCandidate;
  }


  public void setWithCandidate(V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithCandidate withCandidate) {
    this.withCandidate = withCandidate;
  }


  public V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover withoutCandidate(V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithoutCandidate withoutCandidate) {
    
    this.withoutCandidate = withoutCandidate;
    return this;
  }

   /**
   * Get withoutCandidate
   * @return withoutCandidate
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithoutCandidate getWithoutCandidate() {
    return withoutCandidate;
  }


  public void setWithoutCandidate(V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithoutCandidate withoutCandidate) {
    this.withoutCandidate = withoutCandidate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover v1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover = (V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover) o;
    return Objects.equals(this.scriptSpecSelectors, v1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover.scriptSpecSelectors) &&
        Objects.equals(this.withCandidate, v1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover.withCandidate) &&
        Objects.equals(this.withoutCandidate, v1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover.withoutCandidate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scriptSpecSelectors, withCandidate, withoutCandidate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover {\n");
    sb.append("    scriptSpecSelectors: ").append(toIndentedString(scriptSpecSelectors)).append("\n");
    sb.append("    withCandidate: ").append(toIndentedString(withCandidate)).append("\n");
    sb.append("    withoutCandidate: ").append(toIndentedString(withoutCandidate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scriptSpecSelectors");
    openapiFields.add("withCandidate");
    openapiFields.add("withoutCandidate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover is not found in the empty JSON string", V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("scriptSpecSelectors") != null && !jsonObj.get("scriptSpecSelectors").isJsonNull()) {
        JsonArray jsonArrayscriptSpecSelectors = jsonObj.getAsJsonArray("scriptSpecSelectors");
        if (jsonArrayscriptSpecSelectors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scriptSpecSelectors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scriptSpecSelectors` to be an array in the JSON string but got `%s`", jsonObj.get("scriptSpecSelectors").toString()));
          }

          // validate the optional field `scriptSpecSelectors` (array)
          for (int i = 0; i < jsonArrayscriptSpecSelectors.size(); i++) {
            V1alpha1ClusterDefinitionSpecComponentDefsInnerPostStartSpecScriptSpecSelectorsInner.validateJsonObject(jsonArrayscriptSpecSelectors.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `withCandidate`
      if (jsonObj.get("withCandidate") != null && !jsonObj.get("withCandidate").isJsonNull()) {
        V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithCandidate.validateJsonObject(jsonObj.getAsJsonObject("withCandidate"));
      }
      // validate the optional field `withoutCandidate`
      if (jsonObj.get("withoutCandidate") != null && !jsonObj.get("withoutCandidate").isJsonNull()) {
        V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchoverWithoutCandidate.validateJsonObject(jsonObj.getAsJsonObject("withoutCandidate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover>() {
           @Override
           public void write(JsonWriter out, V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover
  */
  public static V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover.class);
  }

 /**
  * Convert an instance of V1alpha1ComponentDefinitionSpecLifecycleActionsSwitchover to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

