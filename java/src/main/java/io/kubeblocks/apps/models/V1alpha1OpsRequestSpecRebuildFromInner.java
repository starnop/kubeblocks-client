/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1OpsRequestSpecRebuildFromInnerInstancesInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * V1alpha1OpsRequestSpecRebuildFromInner
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T15:59:08.817252Z[Etc/UTC]")
public class V1alpha1OpsRequestSpecRebuildFromInner {
  public static final String SERIALIZED_NAME_BACKUP_NAME = "backupName";
  @SerializedName(SERIALIZED_NAME_BACKUP_NAME)
  private String backupName;

  public static final String SERIALIZED_NAME_COMPONENT_NAME = "componentName";
  @SerializedName(SERIALIZED_NAME_COMPONENT_NAME)
  private String componentName;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<V1alpha1OpsRequestSpecRebuildFromInnerInstancesInner> instances = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESTORE_ENV = "restoreEnv";
  @SerializedName(SERIALIZED_NAME_RESTORE_ENV)
  private Object restoreEnv;

  public V1alpha1OpsRequestSpecRebuildFromInner() {
  }

  public V1alpha1OpsRequestSpecRebuildFromInner backupName(String backupName) {
    
    this.backupName = backupName;
    return this;
  }

   /**
   * Indicates the name of the Backup custom resource from which to recover the instance. Defaults to an empty PersistentVolume if unspecified.   Note: - Only full physical backups are supported for multi-replica Components (e.g., &#39;xtrabackup&#39; for MySQL). - Logical backups (e.g., &#39;mysqldump&#39; for MySQL) are unsupported in the current version.
   * @return backupName
  **/
  @jakarta.annotation.Nullable
  public String getBackupName() {
    return backupName;
  }


  public void setBackupName(String backupName) {
    this.backupName = backupName;
  }


  public V1alpha1OpsRequestSpecRebuildFromInner componentName(String componentName) {
    
    this.componentName = componentName;
    return this;
  }

   /**
   * Specifies the name of the Component.
   * @return componentName
  **/
  @jakarta.annotation.Nonnull
  public String getComponentName() {
    return componentName;
  }


  public void setComponentName(String componentName) {
    this.componentName = componentName;
  }


  public V1alpha1OpsRequestSpecRebuildFromInner instances(List<V1alpha1OpsRequestSpecRebuildFromInnerInstancesInner> instances) {
    
    this.instances = instances;
    return this;
  }

  public V1alpha1OpsRequestSpecRebuildFromInner addInstancesItem(V1alpha1OpsRequestSpecRebuildFromInnerInstancesInner instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

   /**
   * Specifies the instances (Pods) that need to be rebuilt, typically operating as standbys.
   * @return instances
  **/
  @jakarta.annotation.Nonnull
  public List<V1alpha1OpsRequestSpecRebuildFromInnerInstancesInner> getInstances() {
    return instances;
  }


  public void setInstances(List<V1alpha1OpsRequestSpecRebuildFromInnerInstancesInner> instances) {
    this.instances = instances;
  }


  public V1alpha1OpsRequestSpecRebuildFromInner restoreEnv(Object restoreEnv) {
    
    this.restoreEnv = restoreEnv;
    return this;
  }

   /**
   * Defines container environment variables for the restore process. merged with the ones specified in the Backup and ActionSet resources.   Merge priority: Restore env &gt; Backup env &gt; ActionSet env.   Purpose: Some databases require different configurations when being restored as a standby compared to being restored as a primary. For example, when restoring MySQL as a replica, you need to set &#x60;skip_slave_start&#x3D;\&quot;ON\&quot;&#x60; for 5.7 or &#x60;skip_replica_start&#x3D;\&quot;ON\&quot;&#x60; for 8.0. Allowing environment variables to be passed in makes it more convenient to control these behavioral differences during the restore process.
   * @return restoreEnv
  **/
  @jakarta.annotation.Nullable
  public Object getRestoreEnv() {
    return restoreEnv;
  }


  public void setRestoreEnv(Object restoreEnv) {
    this.restoreEnv = restoreEnv;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1OpsRequestSpecRebuildFromInner v1alpha1OpsRequestSpecRebuildFromInner = (V1alpha1OpsRequestSpecRebuildFromInner) o;
    return Objects.equals(this.backupName, v1alpha1OpsRequestSpecRebuildFromInner.backupName) &&
        Objects.equals(this.componentName, v1alpha1OpsRequestSpecRebuildFromInner.componentName) &&
        Objects.equals(this.instances, v1alpha1OpsRequestSpecRebuildFromInner.instances) &&
        Objects.equals(this.restoreEnv, v1alpha1OpsRequestSpecRebuildFromInner.restoreEnv);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupName, componentName, instances, restoreEnv);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1OpsRequestSpecRebuildFromInner {\n");
    sb.append("    backupName: ").append(toIndentedString(backupName)).append("\n");
    sb.append("    componentName: ").append(toIndentedString(componentName)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    restoreEnv: ").append(toIndentedString(restoreEnv)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupName");
    openapiFields.add("componentName");
    openapiFields.add("instances");
    openapiFields.add("restoreEnv");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("componentName");
    openapiRequiredFields.add("instances");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1OpsRequestSpecRebuildFromInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1OpsRequestSpecRebuildFromInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1OpsRequestSpecRebuildFromInner is not found in the empty JSON string", V1alpha1OpsRequestSpecRebuildFromInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1OpsRequestSpecRebuildFromInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1OpsRequestSpecRebuildFromInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1OpsRequestSpecRebuildFromInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("backupName") != null && !jsonObj.get("backupName").isJsonNull()) && !jsonObj.get("backupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupName").toString()));
      }
      if (!jsonObj.get("componentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `componentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("componentName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("instances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instances` to be an array in the JSON string but got `%s`", jsonObj.get("instances").toString()));
      }

      JsonArray jsonArrayinstances = jsonObj.getAsJsonArray("instances");
      // validate the required field `instances` (array)
      for (int i = 0; i < jsonArrayinstances.size(); i++) {
        V1alpha1OpsRequestSpecRebuildFromInnerInstancesInner.validateJsonObject(jsonArrayinstances.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1OpsRequestSpecRebuildFromInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1OpsRequestSpecRebuildFromInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1OpsRequestSpecRebuildFromInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1OpsRequestSpecRebuildFromInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1OpsRequestSpecRebuildFromInner>() {
           @Override
           public void write(JsonWriter out, V1alpha1OpsRequestSpecRebuildFromInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1OpsRequestSpecRebuildFromInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1OpsRequestSpecRebuildFromInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1OpsRequestSpecRebuildFromInner
  * @throws IOException if the JSON string is invalid with respect to V1alpha1OpsRequestSpecRebuildFromInner
  */
  public static V1alpha1OpsRequestSpecRebuildFromInner fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1OpsRequestSpecRebuildFromInner.class);
  }

 /**
  * Convert an instance of V1alpha1OpsRequestSpecRebuildFromInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

