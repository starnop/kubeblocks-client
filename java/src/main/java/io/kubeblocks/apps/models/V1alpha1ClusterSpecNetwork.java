/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * The configuration of network.   Deprecated since v0.9. This field is maintained for backward compatibility and its use is discouraged. Existing usage should be updated to the current preferred approach to avoid compatibility issues in future releases.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T15:59:08.817252Z[Etc/UTC]")
public class V1alpha1ClusterSpecNetwork {
  public static final String SERIALIZED_NAME_HOST_NETWORK_ACCESSIBLE = "hostNetworkAccessible";
  @SerializedName(SERIALIZED_NAME_HOST_NETWORK_ACCESSIBLE)
  private Boolean hostNetworkAccessible;

  public static final String SERIALIZED_NAME_PUBLICLY_ACCESSIBLE = "publiclyAccessible";
  @SerializedName(SERIALIZED_NAME_PUBLICLY_ACCESSIBLE)
  private Boolean publiclyAccessible;

  public V1alpha1ClusterSpecNetwork() {
  }

  public V1alpha1ClusterSpecNetwork hostNetworkAccessible(Boolean hostNetworkAccessible) {
    
    this.hostNetworkAccessible = hostNetworkAccessible;
    return this;
  }

   /**
   * Indicates whether the host network can be accessed. By default, this is set to false.
   * @return hostNetworkAccessible
  **/
  @jakarta.annotation.Nullable
  public Boolean getHostNetworkAccessible() {
    return hostNetworkAccessible;
  }


  public void setHostNetworkAccessible(Boolean hostNetworkAccessible) {
    this.hostNetworkAccessible = hostNetworkAccessible;
  }


  public V1alpha1ClusterSpecNetwork publiclyAccessible(Boolean publiclyAccessible) {
    
    this.publiclyAccessible = publiclyAccessible;
    return this;
  }

   /**
   * Indicates whether the network is accessible to the public. By default, this is set to false.
   * @return publiclyAccessible
  **/
  @jakarta.annotation.Nullable
  public Boolean getPubliclyAccessible() {
    return publiclyAccessible;
  }


  public void setPubliclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ClusterSpecNetwork v1alpha1ClusterSpecNetwork = (V1alpha1ClusterSpecNetwork) o;
    return Objects.equals(this.hostNetworkAccessible, v1alpha1ClusterSpecNetwork.hostNetworkAccessible) &&
        Objects.equals(this.publiclyAccessible, v1alpha1ClusterSpecNetwork.publiclyAccessible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostNetworkAccessible, publiclyAccessible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ClusterSpecNetwork {\n");
    sb.append("    hostNetworkAccessible: ").append(toIndentedString(hostNetworkAccessible)).append("\n");
    sb.append("    publiclyAccessible: ").append(toIndentedString(publiclyAccessible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostNetworkAccessible");
    openapiFields.add("publiclyAccessible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ClusterSpecNetwork
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ClusterSpecNetwork.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ClusterSpecNetwork is not found in the empty JSON string", V1alpha1ClusterSpecNetwork.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ClusterSpecNetwork.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ClusterSpecNetwork` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ClusterSpecNetwork.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ClusterSpecNetwork' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ClusterSpecNetwork> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ClusterSpecNetwork.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ClusterSpecNetwork>() {
           @Override
           public void write(JsonWriter out, V1alpha1ClusterSpecNetwork value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ClusterSpecNetwork read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ClusterSpecNetwork given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ClusterSpecNetwork
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ClusterSpecNetwork
  */
  public static V1alpha1ClusterSpecNetwork fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ClusterSpecNetwork.class);
  }

 /**
  * Convert an instance of V1alpha1ClusterSpecNetwork to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

